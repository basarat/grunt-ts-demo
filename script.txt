Hey everybody, basarat here, and Today we are going to talk about how you 
can streamline your typescript development experience. 
We will go through a basic application and show the simple workflow. 
And then use a grunt plugin to smooth out the routine tasks. 

We have a very basic application. 

Lets create a new file. 
Lets call it human cause well, humans are animals. And humans (especially developers) eat pizza.
Now you need to go in and add all these references. 
You index.html 
You main.ts
While all that you wanted was that animal should come before other files and main.ts should come after 
-
Additionally when the signature changes. e.g. lets remove the speak function. It still compiles. 
However its a runtime + compile time error

Maintaining all this is not a lot but it is just "Grunt" work that you are doing.
And I'd rather offload it. 

Grunt-TS 
Lets see our optomized workflow with grunt-ts 

lets install it. 
First off you need nodejs. I have a seperate video on that but its pretty straight forward. 
    Just download and run the installer with the default options.
Now lets install the grunt cli. 
    To access the grunt command from the commandline you need it installed globally. 
    This is a one time thing and you don't need to do it for each project. 
        npm install -g grunt-cli.
    And node package manager will install it for you. 
Now go to your project directory and create a file called package.json
    This will be used to list your development time dependencies. 
    Add a json property for devDependencies and a sub property for grunt and grunt-ts
    with the latest versions. 
    And you can find these versions with the command npm info e.g.: 
        npm info grunt 
Finally just run 
        npm install
    This will not only download grunt-ts  and its dependencies (including grunt)     
These files are downloaded into node_modules folder.
You do not need to commit node_modules into source control.
    All you need to commit is package.json since anyone can run     
        npm install
    and it will fetch everything for them.     
    
While this downloads. Lets create a Gruntfile.js
    It is just a simple commonjs module file. 
    It exports a single function, That is called with the grunt object. 
    We load our grunt tasks that we specified in npm. 
    And then we create a configuration. 
    Finally we register a default task that grunt will call if we do not pass any task name. 
Let me explain what I mean with the default task. As it stands we can run
        grunt ts:dev
    i.e the dev target within the ts task. 
    And since we have the default registered we can now just do 
        grunt 
    and it will automatically run ts:dev for us. 

Now lets look at the configuration one by one. 
    The only thing that is really required is the src. 
    It can accept pretty fancy file globs including excluding files with a particular pattern etc. 
        And if I do that and run grunt
        It will compile our files and exit. 
    Lets look at the options. These are pretty simple. Same as the typescript compiler options. 
    Lets just show one, let see source maps. If I make them false and run this. 
        You can see that it generates javascript files for us. 
        If I make it true you can see it generates map files.
    These options can be overridden at the module or the target level. 
        Lets move it in and show that it still works.
    So you can have a dev target, and a build target with different configurations.
        Lets make another target call it foo. And specify a different option. 
    For the most part you do not need to modify the options since the default are pretty sane. 

Now lets look at the cool stuff which is the module configuration options.        
We can as it to watch a folder. 
    Now whenever a typescript file changes within this folder it will recompile for us. 
    And if there are any compile errors within the entire file glob. 
    It will point out the error. 
        Lets change a signature. Now we get a compile error. 
        What I would do is that I would have this running in some corner
        and it will tell me when I have broken something.
    That's one advantage 
You can specify a reference file. 
    What this will do is that it will maintain the names and links of all our typescript files
    So we no longer need to do that. 
    All we do now is add a reference to our reference file. 
    And if you get a new file. Guess what. You don't need to add any new references manually. 
    But you still need to update index.html. 
    Well it can actually merge your javascript files for you as well. 
    Finally order the few files that matter in reference.ts. 
    
    Everything inside grunt-start / grunt-end is generated and maintained for you. 
        Lets delete human.ts and remove it from main.ts. We don't need to update any references. And it still works. 
        Lets add it back. And call it from main.ts. And it just works. 
    You can have additional files + comments  in this section as well and they all stick around. 
        e.g. Say you want cow to come before all animals. Thats fine. 
        Move it outside and now it will not get added inside this section.

Finally a really cool thing provided by the typescript team is sourcemap support. 
They work with --out parameter as well. So you can see that we are only requesting out.js 
        
Debug the typescript in developer tools 
Place a breakpoint at animal 
You can see the call stack 
You can observe variables 
And all the other cool stuff in chrome dev tools

Final thing I would like to mention is that
Source of the plugin is actally in typescript as well, and I'd welcome you ideas and opinions.
hit me up in twitter, github or comments below. And if you like this, i'd appreciate if you share it. 
Till next time, have a good day

